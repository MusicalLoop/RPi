#!/usr/bin/env python3

import requests
import ST7735
import time
import platform
import json
import paho.mqtt.client as mqtt

from bme280 import BME280                           # Temperature sensor
from pms5003 import PMS5003, ReadTimeoutError       # Particulate Matter sensor
from subprocess import PIPE, Popen, check_output

try:
    from smbus2 import SMBus
except ImportError:
    from smbus import SMBus

MQTT_Broker_IP="192.168.178.21"
MQTT_Broker_Port=4883
Keep_Alive_Interval=60
MQTT_Topic="/EnviroPi/Luft/"
MQTT_QoS = 1
Sensor_Interval=300    #Take a reading once every 5 minutes (300 seconds)

DateTimeFmt = "%Y-%m-%d %H:%M:%S"

print("""EnviroPi - Read Temperature, Pressure, Humidity, PM2.5 & PM10 from
EnviroPlus and send the data to LuftDaten - the citizen science air quality
project.""")


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Get Raspberry Pi serial number to use as ID
# ++     along with a Client_Suffix
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++

def get_serial_number():
    with open('/proc/cpuinfo', 'r') as f:
        for line in f:
            if line[0:6] == 'Serial':
                return line.split(":")[1].strip()

def get_uname():
   return platform.node()

def get_mqtt_id():
    Id = get_uname() + "-" + get_serial_number()
    print(Id)
    return Id

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Create Sensors - BME280 & PMS5003
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
bus = SMBus(1)

# Create BME280 instance
bme280 = BME280(i2c_dev=bus)

# Create PMS5003 instance
pms5003 = PMS5003()



# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Read values from BME280 and PMS5003 and 
# ++ return as dict
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def read_values():
    values = {}
    cpu_temp = get_cpu_temperature()
    raw_temp = bme280.get_temperature()
    comp_temp = raw_temp - ((cpu_temp - raw_temp) / comp_factor)
    values["temperature"] = "{:.2f}".format(comp_temp)
    values["pressure"] = "{:.2f}".format(bme280.get_pressure() * 100)
    values["humidity"] = "{:.2f}".format(bme280.get_humidity())
    try:
        pm_values = pms5003.read()
        values["P2"] = str(pm_values.pm_ug_per_m3(2.5))
        values["P1"] = str(pm_values.pm_ug_per_m3(10))
    except ReadTimeoutError:
        pms5003.reset()
        pm_values = pms5003.read()
        values["P2"] = str(pm_values.pm_ug_per_m3(2.5))
        values["P1"] = str(pm_values.pm_ug_per_m3(10))
    return values

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Get CPU temperature to use for compensation
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def get_cpu_temperature():
    process = Popen(['vcgencmd', 'measure_temp'], stdout=PIPE, universal_newlines=True)
    output, _error = process.communicate()
    return float(output[output.index('=') + 1:output.rindex("'")])

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Get Raspberry Pi serial number to use as ID
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def get_serial_number():
    with open('/proc/cpuinfo', 'r') as f:
        for line in f:
            if line[0:6] == 'Serial':
                return line.split(":")[1].strip()

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ What time is it?
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def get_time():
    now = time.localtime()
    return time.strftime(DateTimeFmt, now)


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Send Data - wrapper function to send data to 
# ++ MQTT and LuftDaten
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def send_data(values, Luft_id, MQ_Client):
    
    resp = False
    send_to_MQTT(values, MQ_Client)
    
    resp = send_to_luftdaten(values, Luft_id)
    
    return resp

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Send Data - LuftDaten
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def send_to_MQTT(values, MQ_Client):
    MQ_Client.publish(MQTT_Topic, get_time() + " " + str(values), qos = MQTT_QoS)


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Send Data - LuftDaten
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def send_to_luftdaten(values, id):

    pm_values = dict(i for i in values.items() if i[0].startswith("P"))
    temp_values = dict(i for i in values.items() if not i[0].startswith("P"))

    pm_values_json = [{"value_type": key, "value": val} for key, val in pm_values.items()]
    temp_values_json = [{"value_type": key, "value": val} for key, val in temp_values.items()]

    resp_1 = requests.post(
        "https://api.luftdaten.info/v1/push-sensor-data/",
        json={
            "software_version": "enviro-plus 0.0.1",
            "sensordatavalues": pm_values_json
        },
        headers={
            "X-PIN": "1",
            "X-Sensor": id,
            "Content-Type": "application/json",
            "cache-control": "no-cache"
        }
    )

    resp_2 = requests.post(
        "https://api.luftdaten.info/v1/push-sensor-data/",
        json={
            "software_version": "enviro-plus 0.0.1",
            "sensordatavalues": temp_values_json
        },
        headers={
            "X-PIN": "11",
            "X-Sensor": id,
            "Content-Type": "application/json",
            "cache-control": "no-cache"
        }
    )

    if resp_1.ok and resp_2.ok:
        return True
    else:
        return False

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Compensation factor for temperature
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
comp_factor = 2.25

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Raspberry Pi ID to send to Luftdaten
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
Luft_id = "raspi-" + get_serial_number()



# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ MQTT Call back functions:
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def on_message(client, userdata, message):
    print("message topic=" + message.topic)
    print("message received " + str(message.payload.decode("utf-8")))
    print("message qos=" + str(message.qos))
    print("message retain flag=" + str(message.retain))

def on_disconnect(client, userdata, rc):
    if rc != 0:
        print("Unexpected disconnection.")
    print("Disconnected")

def on_log(client, userdata, level, buf):
    print("log: " + buf)


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Initialise MQTT Client
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
def init_MQTT():

    MQTT_client = mqtt.Client(Client_Id)        # New MQTT Client Object

    MQTT_client.connect(MQTT_Broker_IP, port = MQTT_Broker_Port)  # Connect to Broker / Server

    MQTT_client.on_message = on_message              # Init on_message call back
    MQTT_client.on_disconnect = on_disconnect        # Init on_disconnect call back

    MQTT_client.loop_start()

    MQTT_client.subscribe(MQTT_Topic)

    MQTT_client.on_log=on_log

    return MQTT_client



# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Add a pause after boot
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
print("Sleeping.....")
time.sleep(30)
print("LuftDaten....")


Client_Id = get_mqtt_id()

MQ_Client = init_MQTT()

time_since_update = 0
update_time = time.time()

# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++ Main loop to read and send data (MQTT & LuftDaten)
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++
while True:
    try:
        time_since_update = time.time() - update_time
        values = read_values()
        # print(values)
        if time_since_update > Sensor_Interval:
            resp = send_data(values, Luft_id, MQ_Client)

            update_time = time.time()
            print("Response: {}\n".format("ok" if resp else "failed"))

    except Exception as e:
        print(e)
